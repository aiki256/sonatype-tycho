/*******************************************************************************
 * Copyright (c) 2011 SAP AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    SAP AG - initial API and implementation
 *******************************************************************************/
package org.eclipse.tycho.p2.resolver.impl;

import java.io.File;
import java.util.Collection;

import org.eclipse.core.runtime.AssertionFailedException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.equinox.p2.metadata.IInstallableUnit;
import org.eclipse.equinox.p2.publisher.IPublisherAction;
import org.eclipse.equinox.p2.publisher.IPublisherInfo;
import org.eclipse.equinox.p2.publisher.Publisher;
import org.eclipse.equinox.p2.publisher.PublisherInfo;
import org.eclipse.equinox.p2.publisher.PublisherResult;
import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
import org.eclipse.tycho.core.facade.MavenLogger;
import org.eclipse.tycho.p2.impl.publisher.MavenPropertiesAdvice;
import org.eclipse.tycho.p2.impl.publisher.repo.TransientArtifactRepository;
import org.eclipse.tycho.p2.metadata.IArtifactFacade;
import org.eclipse.tycho.p2.util.StatusTool;

@SuppressWarnings("restriction")
public class ResolutionContextBundlePublisher {

    private final MavenLogger logger;

    public ResolutionContextBundlePublisher(MavenLogger logger) {
        this.logger = logger;
    }

    /**
     * Generate p2 data for an artifact, if the artifact is an OSGI bundle.
     * <p>
     * The p2 metadata produced by this method is only determined by the artifact, and the function
     * used for this conversion must not change (significantly) even in future versions. This is
     * required because the resulting metadata can be included in p2 repositories built by Tycho,
     * and hence may be propagated into the p2 universe. Therefore the metadata generated by this
     * method shall fulfil the basic assumption of p2 that ID+version uniquely identifies a
     * unit/artifact. Assuming that distinct bundle artifacts specify unique ID+versions in their
     * manifest (which should be mostly true), and the p2 BundlesAction used in the implementation
     * doesn't change significantly (which can also be assumed), these conditions specified above a
     * met.
     * </p>
     * <p>
     * In slight deviation on the principles described in the previous paragraph, the implementation
     * adds GAV properties to the generated IU. This is justified by the potential benefits of
     * tracing the origin of artifact.
     * </p>
     * 
     * @param artifact
     *            An artifact in local file system.
     * @return the p2 metadata of the artifact, or <code>null</code> if the artifact isn't a valid
     *         OSGi bundle.
     */
    public IInstallableUnit attemptToPublishBundle(IArtifactFacade artifact) {
        if (!isAvailableAsLocalFile(artifact)) {
            // this should have been ensured by the caller
            throw new IllegalArgumentException("Not an artifact file: " + artifact.getLocation());
        }
        if (isCertainlyNoBundle(artifact)) {
            return null;
        }

        // inlined and stripped down from: generator.generateMetadata(artifact, environments, units, null);
        PublisherInfo publisherInfo = new PublisherInfo();
        publisherInfo.setArtifactOptions(IPublisherInfo.A_INDEX | IPublisherInfo.A_PUBLISH);
        publisherInfo.setArtifactRepository(new TransientArtifactRepository());
        // TODO remember artifacts

        publisherInfo.addAdvice(new MavenPropertiesAdvice(artifact.getGroupId(), artifact.getArtifactId(), artifact
                .getVersion(), artifact.getClassidier()));
        IPublisherAction[] actions = new IPublisherAction[] { new BundlesAction(new File[] { artifact.getLocation() }) };
        PublisherResult result = new PublisherResult();
        Publisher publisher = new Publisher(publisherInfo, result);
        IStatus status = publisher.publish(actions, null);

        if (!status.isOK()) {
            /**
             * If publishing of a jar fails, it is simply not added to the resolution context.
             * However the BundlesAction (currently) never reports failures, so we want to see if we
             * ever should get here.
             */
            logger.warn(StatusTool.collectProblems(status), status.getException());
        }

        Collection<IInstallableUnit> units = result.getIUs(null, null);
        if (units.size() > 1) {
            throw new AssertionFailedException("BundlesAction produced more than one IU for " + artifact.getLocation());
        } else if (units.size() == 1) {
            return units.iterator().next();
        } else {
            return null;
        }
    }

    private boolean isAvailableAsLocalFile(IArtifactFacade artifact) {
        File localLocation = artifact.getLocation();
        return localLocation != null && localLocation.isFile();
    }

    private boolean isCertainlyNoBundle(IArtifactFacade artifact) {
        return !artifact.getLocation().getName().endsWith(".jar");
    }

    IArtifactRepository getArtifactRepoOfProcessedBundles() {
        // TODO implement
        throw new UnsupportedOperationException();
    }
}
